import React, { useState, useEffect } from 'react';
import { message } from 'antd';
import { Table, Button, Space, Popconfirm, Modal, Form, Input, InputNumber } from 'antd';
import { getTableApi, editTableApi, deleteTableApi } from '../../util/api'; // Th√™m API ch·ªânh s·ª≠a b√†n

const TablePage = () => {
    const [tables, setTables] = useState([]);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingTable, setEditingTable] = useState(null);
    const [form] = Form.useForm();

    useEffect(() => {
        fetchTables();
    }, []);

    const fetchTables = async () => {
        try {
            const res = await getTableApi();
            if (res) setTables(res);
        } catch (error) {
            console.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†n:", error);
        }
    };

    const handleEdit = (record) => {
        setEditingTable(record);
        form.setFieldsValue(record); // ƒêi·ªÅn d·ªØ li·ªáu c≈© v√†o form
        setIsModalOpen(true);
    };

    const handleDelete = async (id) => {
        try {
            await deleteTableApi(id); // G·ªçi API x√≥a
            message.success("X√≥a b√†n th√†nh c√¥ng!"); // üîî Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            fetchTables(); // L√†m m·ªõi danh s√°ch sau khi x√≥a
        } catch (error) {
            message.error("‚ùå L·ªói khi x√≥a b√†n!"); // üîî Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            console.error("L·ªói khi x√≥a b√†n:", error);
        }
    };

    const handleSaveEdit = async () => {
        try {
            const values = await form.validateFields();
            await editTableApi(editingTable._id, values); // G·ª≠i API c·∫≠p nh·∫≠t
            message.success("C·∫≠p nh·∫≠t b√†n th√†nh c√¥ng!");
            setIsModalOpen(false);
            fetchTables(); // L√†m m·ªõi danh s√°ch
        } catch (error) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t b√†n:", error);
        }
    };

    const columns = [
        { title: 'T√™n b√†n', dataIndex: 'table_name', key: 'table_name' },
        { title: 'S·ª©c ch·ª©a', dataIndex: 'capacity', key: 'capacity' },
        { title: 'Ghi ch√∫', dataIndex: 'notes', key: 'notes' },
        {
            title: 'H√†nh ƒë·ªông',
            key: 'actions',
            render: (text, record) => (
                <Space>
                    <Button type="primary" onClick={() => handleEdit(record)}>S·ª≠a</Button>
                    <Popconfirm title="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a?" onConfirm={() => handleDelete(record._id)} okText="C√≥" cancelText="Kh√¥ng">
                        <Button type="danger">X√≥a</Button>
                    </Popconfirm>
                </Space>
            ),
        },
    ];

    return (
        <div style={{ padding: '20px', backgroundColor: '#f4f4f4' }}>
            <h2 style={{ textAlign: 'center', marginBottom: '20px' }}>Danh s√°ch b√†n</h2>
            <Table columns={columns} dataSource={tables} rowKey="_id" pagination={{ pageSize: 5 }}/>

            <Modal
                title="Ch·ªânh s·ª≠a b√†n"
                open={isModalOpen}
                onOk={handleSaveEdit}
                onCancel={() => setIsModalOpen(false)}
            >
                <Form form={form} layout="vertical">
                    <Form.Item name="table_name" label="T√™n b√†n" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n b√†n!" }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item name="capacity" label="S·ª©c ch·ª©a" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p s·ª©c ch·ª©a!" }]}>
                        <InputNumber min={1} style={{ width: '100%' }} />
                    </Form.Item>
                    <Form.Item name="notes" label="Ghi ch√∫">
                        <Input.TextArea />
                    </Form.Item>
                </Form>
            </Modal>
        </div>
    );
};

export default TablePage;
